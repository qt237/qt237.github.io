[{"categories":["SFML"],"content":"关于俄罗斯方块的一些东西，设计思路等","date":"2024-06-20","objectID":"/posts/code/object/%E4%BF%84%E7%BD%97%E6%96%AF%E6%96%B9%E5%9D%97sfml/","tags":["SFML","C++"],"title":"俄罗斯方块SFML","uri":"/posts/code/object/%E4%BF%84%E7%BD%97%E6%96%AF%E6%96%B9%E5%9D%97sfml/"},{"categories":["SFML"],"content":" 目的看看整个开发的流程是如何的。 ","date":"2024-06-20","objectID":"/posts/code/object/%E4%BF%84%E7%BD%97%E6%96%AF%E6%96%B9%E5%9D%97sfml/:1:0","tags":["SFML","C++"],"title":"俄罗斯方块SFML","uri":"/posts/code/object/%E4%BF%84%E7%BD%97%E6%96%AF%E6%96%B9%E5%9D%97sfml/"},{"categories":["SFML"],"content":" 结构需要一个结构来存储方块 int block[7][4] = {1, 3, 5, 7, // I字型 3, 5, 4, 6, // Z字型 2, 4, 5, 7, // S字型2 , 3, 5, 7, // L字型 3, 5, 7, 6, // J字型 3, 5, 4, 7, // T字型 2, 3, 4, 5, // O字型}; 这个转化为二维坐标x,y，就是x=block%2,y=block/2; 0 1 // 后续以1为中心旋转 2 3 4 5 6 7 struct Point { int x; int y; } a[4], b[4]; a[4]来储存坐标 使用的话 int n = 3; for (int i = 0; i \u003c 4; i++) { a[i].x = block[n][i] % 2; a[i].y = block[n][i] / 2; }旋转 if (isRotate) { Point p = a[1]; // center for (int i = 0; i \u003c 4; i++) { int x = a[i].y - p.y; int y = a[i].x - p.x; a[i].x = p.x - x; a[i].y = p.y + y; } }","date":"2024-06-20","objectID":"/posts/code/object/%E4%BF%84%E7%BD%97%E6%96%AF%E6%96%B9%E5%9D%97sfml/:2:0","tags":["SFML","C++"],"title":"俄罗斯方块SFML","uri":"/posts/code/object/%E4%BF%84%E7%BD%97%E6%96%AF%E6%96%B9%E5%9D%97sfml/"},{"categories":["SFML"],"content":" 时间控制自由下落通过sf::Clock // float timer // sf::Clock clock; float time = clock.getElapsedTime().asSeconds(); clock.restart(); timer += time;大概通过这样的时间来控制，然后： if (timer \u003e 0.3) { for (int i = 0; i \u003c 4; i++) { currentBlock[i].y += dnature; } if (!check()) { for (int i = 0; i \u003c 4; i++) { map[backBlock[i].x][backBlock[i].y] = colorCurrent; } // getline getLine(); if (!isGameOver()) { gameOver = true; } newBlock(); newNextBlock(); } timer = 0; }","date":"2024-06-20","objectID":"/posts/code/object/%E4%BF%84%E7%BD%97%E6%96%AF%E6%96%B9%E5%9D%97sfml/:3:0","tags":["SFML","C++"],"title":"俄罗斯方块SFML","uri":"/posts/code/object/%E4%BF%84%E7%BD%97%E6%96%AF%E6%96%B9%E5%9D%97sfml/"},{"categories":null,"content":"很长的六部，是经典的奇幻小说三部曲之一，琐碎但有意思。非常独特的成长和反思的世界。跟魔界完全不同的味道。","date":"2024-04-05","objectID":"/posts/write/blog/%E5%9C%B0%E6%B5%B7%E4%BC%A0%E5%A5%87/","tags":["读书摘录"],"title":"地海传奇摘录","uri":"/posts/write/blog/%E5%9C%B0%E6%B5%B7%E4%BC%A0%E5%A5%87/"},{"categories":null,"content":" 地海传奇 厄休拉·勒古恩唯静默，生言语； 唯黑暗，成光明； 唯死亡，得再生： 鹰扬虚空，灿兮明兮。 ——《伊亚创世歌》 等她发现达尼什么也不知道，却能镇服羊群，让它们靠拢，跟随他跑回村子，这位姨母立刻明白，达尼的内在必然具备魔法的力量 只要说出那个真名，隼鹰必应声而至 天生的法师心智，若滞留于黑暗，是危险的事。” 要聆听，必先静默。” 要聆听，必先静默。” 男孩皱起眉头，被人这么一说，觉得自己像傻瓜一样，他可不喜欢。但是，他抑制住不悦和不耐，努力表现出顺服的样子，希望能因此让欧吉安教他些什么，因为他渴望学习，渴望获得力量。但渐渐地，格得开始认为，似乎随便跟从哪个药草夫或村野术士出来散步，都可以学得多些了。等到两人沿着盘旋的山路西行，过了巍斯，走入荒僻的森林以后，格得更是愈来愈不明白，欧吉安这位伟大的法师究竟有什么伟大，他又有什么魔法。因为每逢下雨，欧吉安连每个天候师都晓得的挪移暴雨的咒语也不说。像弓忒岛或英拉德岛这种术士云集的岛屿，常可能看到乌云缓缓从这边跌到那边 太古语中，所有事物的名称都是真名，若想看懂太古语，就得先学习符文——这种早在世间岛屿浮出海洋之时就写成的符号 岛屿周围一英里外的北方、东方和南方，乌云高悬；但柔克岛上方，天空宁静无云，星斗正一颗颗露面放光 点亮一盏烛光，即投出一道黑影……” 那些名字必须在午夜之前记住，否则届时墨迹自动消退，只剩空无一字的羊皮纸张 欲成为海洋大师，必知晓海中每一滴水的真名。” 银色环扣就是术士的标记 他告诉自己，他之所以会碰到这种恐惧和幽暗的时刻，纯粹是因为他个人无知而产生的暗影。他只要学得愈多，惧怕的事物就会愈少；等到他最后拥有巫师的全部力量时，就一无所惧了 除了自己与命名的人之外，没有人知道一个人的真名。他可能在最后才决定告诉他的兄弟，或妻子，或朋友，但即使是那些少数人，只要有第三者可能听到，他们也不会以真名相称 知道一个人的名字，就掌握了那人的性命。所以，对已经丧失自信的格得而言，维奇送的是只有朋友才会相赠的礼物：那是一项证明，证明末曾动摇、也不可动摇的信赖 你还年幼，以为法师无所不能。我以前也这么认为。我们每个人都曾经有那种想法。但事实是，一个人真正的力量若增强，知识若拓宽，他得以依循的路途反而变窄。到最后他什么也不挑拣，只能全心从事必须做的事……” 柔克学院训练出来的巫师通常前住城市或城堡，去为身居要津的爵爷效劳。而那些爵爷自然都把巫师安顿在豪宅里 龙很长时间才会感到饥饿，但一旦饿了就很难满足 伤可治，疾可疗，垂死的灵魂只能由它去 他对自己的懦弱感到愤怒，但愤怒也没有用 他想寻求保护，却找不到。那东西不是血肉之躯，不是活的，不是灵魂，没有名字 龙是听觉敏锐的动物 他怕龙的魔法，因为老龙变起法术来，与人的法术不相上下，不但深具威力而且狡诈 他差一点就凝视巨龙的双眼而被逮住，因为人不可以注视龙的双眼 风与火是龙族的血亲，但风与火不利于海上打斗 他与格得一样，都是用太古语，因为龙族至今仍使用那种语言。虽然人类讲太古语时必须说真话，但龙可不一定如此。太古语是它们的语言，所以他们可以在其中撒谎，或任意扭曲真话以达不当目的，使没有警觉的听者陷入镜像语言的迷阵中 龙有自己独到的智慧，也是比人类悠久的族群。很少人能猜透龙知道什么、如何知道，那些猜得透的少数人就是“龙主” “耶瓦德，我们势均力敌。你拥有力气，我拥有你的名字。你愿意谈交易了吗？” 同样的情形在《侯德行谊》中已被传唱：“晓曙创造地与海，形状来自黑影，把梦逐入黑暗王国。” 黄金在瓯司可岛是不得了的东西，却不能造就良好的友谊，对同样重视黄金的龙族而言，也是如此 瓯司可岛的自由人一律在腰际佩挂长刀 在格得能施法或行召唤力量之前，倒让那个尸偶以粗嗄的声音抢先说话了：“格得！” 如此一来，年轻的格得想变形也为时已晚，只能固锁在自己真实的存在中，必须这样毫无防备地面对尸偶 格得怜悯这位夫人，她就像笼中白鹿、折翼白鸟、老男人指上的银戒，只是班德斯克的一项收藏品 它是一块太古石，石中禁锢着一个旷古而恐怖的精灵 不当的手段，必导致恶果 他没有答应，邪恶很难掌握一个尚未答应它的灵魂 成为巫师以后，他了解到这种游戏的代价，就是失去自我、远离真相。一个人停留在不是原形的变形中越久，这种危险就越大。每个学徒术士都晓得威岛包桔巫师的故事：那位巫师很喜欢变成熊形，变形次数多了、时间长了之后，那只熊在他身上长大，他本人却死了。所以他变成一只熊，还在森林里杀了亲生儿子，后来被人追捕杀死。没有人晓得，在内极海跳跃的众多海豚，有多少只本来是人。他们原是有智慧的人，只不过在永无静止的大海里嬉戏，高兴地忘了他们的智慧和名字 “万物皆有名。” “我在阿耳河的泉源为你命名，那条溪流由山上流入大海。”大法师说，“一个人终有一天会知道他所前往的终点，但他如果不转身，不回到起点，不把起点放入自己的存在之中，就不可能知道终点。假如他不想当一截在溪流中任溪水翻滚淹没的树枝，他就要变成溪流本身，完完整整的溪流，从源头到大海 “‘第三次’具有神奇魔力。” 欧吉安在寒冷的清晨醒来时，格得已经走了。他只用符文在炉底石上留下银色的潦草字迹，十足的巫师作风。欧吉安阅读时，字迹几乎消退：“师父，我去追了。” 尽管海上会兴起暴风雨和海怪，却没有邪恶的力量，邪恶属于陆地 说：“格得，你从苦难和黑暗中来，但我真欢喜你到来。” 每块陆地都有它自己的力量，比较高超的力量由内陆发动，比较普通的力量就得去猜测它有哪些统辖的力量 光就是一种力量，是我们赖以生存的巨大力量，不靠我们的需要而独立存在。日光与星光就是时间，时间就是光。生命就在日光和岁月中 “要说一个字，”格得慢慢回答，“必须先有寂静。说之前和之后都要有寂静。”说完，他突然站起来，边说道：“我实在没有权利谈这些事。原本要让我说的字，我偏偏说错。所以，我最好保持安静，以后不会再说了。或许，只有黑暗才是真正的力量。” 于是，格得如天生的法师般，把他的恐惧和憾恨编成一首诗歌 要聆听，必先静默……” “在这个时候，”维奇说，“我赞同世界只有一面；要是航行过远，那个人就会跌出边缘。” 因为开阔海的鱼不知道自己的真名，所以也听不懂法术 晚风宜人。春季星辰密密麻麻在天上闪烁，有如春季草地繁生的一整片小雏菊，也如四月海上的点点渔火。但这女孩没有草地或海洋的记忆。她没有仰头观星 但潘姒的话语背后仍有她不同意且害怕的部分，那对阿儿哈而言是全然崭新的概念。过去她不了解人与人多么不同，大家对生命的看法何等悬殊。此刻她觉得好像一抬头突然看见窗外悬挂了颗全新的行星，一颗巨大而人口众多的行星，那是个她全然陌生的世界，神在那里一点分量也没有。潘姒这种不信神的坚定信念，让她感到惊吓 美丽，一个比黑暗奥秘更为深邃的奥秘 “我叫恬娜。”她站在阳光遍照的开阔天空下说着，声音不大，身体因寒冷、恐怖与欢喜而颤抖，“我的名字找回来了。我叫恬娜！” 无名者即黑暗、毁灭和疯狂，是这世界古老的神圣力量，先于光明存在……我认为她们很久很久以前就把你们的女祭司柯琇逼疯了；我认为她逡巡这些洞穴，一如逡巡‘自我’的迷宫，时至今日，她再也无法见到天日 无名者确实存在，却不是你的主人，从来都不是。你是自由的，恬娜，她们教导你当奴隶，但你已经冲破束茧获得自由了。” “他觉得很荒诞，我居然完全不知道那是什么。我们人类在龙族眼里一向是很好笑的族群。但它们还记得厄瑞亚拜，提到厄瑞亚拜时好像把他当成一条龙，而不是人 “是的，没错，厄瑞亚拜之环。但我还想到了其他东西。或许可以称它为‘信任’……但这只是那样东西的许多名称之一而已。它是很了不起的一样东西。我们每个人单独时都软弱，有了它就会变强，甚至比黑暗的力量强。” 没有回答。从以前到现在都不曾有回答 我可以借由名字唤来一只兔子，兔子会听话过来，但你会把那样召唤来的兔子抓去剥皮煮了吃吗？快饿死时或许会。但我想，那样做就破坏了信任。” 他和大海一样，远远超乎她能触及 她渐渐认识到“自由”的沉重。自由是重担，对心灵而言是硕大无朋的奇特负荷，一点也不轻松。它不是白白赠予的礼物，而是一项选择，而且可能是艰难的选择。自由之路是爬坡路，上接光明，但负重的旅者可能永远到不了那个终点 她过去这一生都在凝望黑暗，但相较之下，这晚海洋上的黑暗更为浩大无边，它没有顶，一直延伸到星辰之外，没有凡俗力量在牵动它。它先于光明存在，也将后于光明存在；它先于生命而存在，也将后于生命而存在。它无限延伸，超越了邪恶 慷慨心灵的奉献，任谁也不能轻率拒绝 我们有王冠，但没有君王去戴 “不，我对自己的血统感到自豪，因为是这血统让我成为王子，它是一种责任，而责任是需要去符合、去履行……” 否认过去就是否认未来。一个人要么接受命运，要么拒绝，但命运不是自己创造来的。山梨树的树根如果不够深，便根本长不出树冠。” 这把剑的历史言明，除了生死交关的情况，它不曾出鞘——也一直出不了鞘。它不会为血腥、复仇或贪念的目的效力，也不会顺服于为掠夺而起的战役 法师与水手相差不远，两者都与苍穹和大海的力量打交道，有时也屈折大风为己用，以便转远为近 亚刃，它们比人类睿智，与它们相处，宛如与梦相处。人类做梦、施法、行善，但也为恶。龙却不做梦，它们本身就是梦。它们不施魔法，魔法就是它们的本质、它们的存在。它们无所作为——它们仅是存在。” 而今他终于知道了被追者的想法：是想独处，希望自由 “埃格，我向来不惩罚，”说话者坚定清晰的声音，与雾中清冷的法术光同样清冷，“但基于公道正义，我把这件事算在你账上：从今天起，你将变成哑巴，直到你找着值得一说的只字片语为止。” 别因一件事似乎是好事而去做；只做你必须做，而且别无他途可行的事。’” 我曾经航行到东方，由于所到之地非常偏远，那里","date":"2024-04-05","objectID":"/posts/write/blog/%E5%9C%B0%E6%B5%B7%E4%BC%A0%E5%A5%87/:0:0","tags":["读书摘录"],"title":"地海传奇摘录","uri":"/posts/write/blog/%E5%9C%B0%E6%B5%B7%E4%BC%A0%E5%A5%87/"},{"categories":["web入门"],"content":"web入门","date":"2024-03-20","objectID":"/posts/code/language/web_new/","tags":["web入门"],"title":"web 入门","uri":"/posts/code/language/web_new/"},{"categories":["web入门"],"content":" 网站的基本结构 index.html文件:包含主页内容，第一次点进网站显示的内容。 images文件夹：网站上使用的所有图片。 styles文件夹：用于设置样式的CSS代码，比如说字体，背景颜色，文本等等。 scripts文件夹:包含所有网站的交互内容的JavaScript代码。 ","date":"2024-03-20","objectID":"/posts/code/language/web_new/:1:0","tags":["web入门"],"title":"web 入门","uri":"/posts/code/language/web_new/"},{"categories":null,"content":"萧红的书，似乎是早期的，所以看起来比较碎，但是能感觉得到，是有想要表达的内容的，不成熟的特色也很好。","date":"2024-03-16","objectID":"/posts/write/blog/%E7%94%9F%E6%AD%BB%E5%9C%BA/","tags":["读书摘录"],"title":"生死场 萧红","uri":"/posts/write/blog/%E7%94%9F%E6%AD%BB%E5%9C%BA/"},{"categories":null,"content":" 生死场 萧红母亲一向是这样，很爱护女儿，可是当女儿败坏了菜棵，母亲便去爱护菜棵了。农家无论是菜棵，或是一株茅草也要超过人的价值 在乡村，永久不晓得，永久体验不到灵魂，只有物质来充实她们 起初因为她和他分辩，他还打她。现在不然了，绝望了！晚间他从城里卖完青菜回来，烧饭自己吃，吃完便睡下，一夜睡到天明；坐在一边那个受罪的女人一夜呼唤到天明。宛如一个人和一个鬼安放在一起，彼此不相关联 刑罚，眼看降临到金枝的身上，使她短的身体，配着那样大的肚子，十分不相称。金枝还不像个妇人！仍和一个小女孩一般，但是肚子膨胀起来了！快做妈妈了！妇人们的刑罚快擒着她了，并且她出嫁还不到四个月，就渐渐会诅咒丈夫，渐渐感到男人是炎凉的人类！那正和别的村妇一样 在乡村，人和动物一起忙着生，忙着死…… 男人们嚷叫：“抬呀！该抬呀。收拾妥当再哭！” 那个小女孩感到不是自己家，身边没有一个亲人，她不哭了 王婆的死信传遍全村，女人们坐在棺材边大大的哭！扭着鼻涕，号啕着：哭孩子的，哭丈夫的，哭自己命苦的，总之，不管有什么冤屈都到这里来送了 “那个人来了没有？那个黑胡子的人？” 平儿仍回到睡梦中，爹爹正鼓动着生力，他却睡了！爹爹的话在他耳边，像蚊虫嗡叫一般地无意义。赵三立刻动怒起来，他觉得他光荣的事业，不能有人承受下去，感到养了这样的儿子没用，他失望了 金枝鼻子做出哼声： “从前恨男人，现在恨小日本子。”最后她转到伤心的路上去，“我恨中国人呢！除外我什么也不恨。” ","date":"2024-03-16","objectID":"/posts/write/blog/%E7%94%9F%E6%AD%BB%E5%9C%BA/:0:0","tags":["读书摘录"],"title":"生死场 萧红","uri":"/posts/write/blog/%E7%94%9F%E6%AD%BB%E5%9C%BA/"},{"categories":null,"content":"我时常问自己：为什么我们中国人既不痛痛快快地活，却又不爽爽快快地死，不生不死地蛰伏着有什么意思？当我耳边听到大家在说“过年”时，才恍然领悟了我们古老文化中沉痼似地积着个牢不可拔的“过渡心理”。在日常的用语中，生活就是“过日子”。逢年逢节大多希望如轻舟已过万重山一般又轻快又不留恋地度过了我们这一辈子的生命。假定命运不好，一路没有好风，这一堆日子怎样打发开，自然会成为一项使人度日如年的担负了。可是这种人却从不想自动地把重荷卸下来休息一下，或甚至直截了当把它抛入深海，他们似乎很认真地把这个担子看成了无可奈何的累赘，做人是一项责任，是一种不必有权利的义务。每过一节，每过一年，不免自相庆幸，好像远征队伍又攻克了一个城市。要不然为什么我吃年夜饭而不吃年中饭？我们的得意处不是在结束了一场事务，所以除夕才值得我们的欢宴么？新年对我们似乎是另一个沉重任务的开始，习俗上不是常用禁食、不会客等淡漠的心情来接受的么？ Enjoy life一句是译不出的，也不易为中国人所了解的。我们是老和尚在古庙里暮色沉沉中撞着铜绿的晚钟，他怎能梦想有少女们在红日初升晨曦缭乱里放声髙歌？在她们人生是个难得的机会。想！在这个悠悠无垠的大宇宙里怎样的侥幸而我有这瞬息的存在。生命既不可久，何必求它淹留，只要能在这瞬息的存在中充充分分地活它一下，也就不辜负上帝给我这一点恩惠了。不久我又得还到这无知的大地，再来时不知在哪时，要是在这一生虽有了做人的机会而并没有痛快地做个人，不是一件最可遗憾的事么？伦敦市繁华的中心叫Piccadilly，我想若把它译作“片刻蝶恋”就很能表示他们那种不放松人生的态度了。 “过日子”的生活态度若是细细加以分析，实在既不是厌恶人生，甚至也不能说对人生取什么消极的反应。若是一个人觉得人生是个痛苦，他若不喜欢痛苦和不相信痛苦是得到快乐的手段时，人生对他也就失去了引诱，于是假若他有一些勇气的话，自不能不直截了当地舍弃这个累赘了。求超脱的人决不能拖着得过且过的过渡精神，他在白茫茫一片的雪地里，看不到埋伏着的火山；他在汹涛滚滚的大海中，望不见万花竞艳的岛国，他应是死了心的，他有的是厌恶和消极，求个“一切皆无”。 抱着“过渡心理”的多少要存几分侥幸之心，我说他心存侥幸，因为他虽则不对光明的来日绝望，但是他却并不积极去追求。“过日子”不是消极而是被动。年来了就过年；节到了就过节；孩子生出了，就养孩子；官运来了，就做官。既不积极地求，却又不消极地避，一切都接受。要是来得好，是这样；来得不好，也是这样。生也如此，死也如此。我常说若要明白中国文化的特性，我们必得借鉴于植物，植物不择地，随处而安；植物不择时，春荣秋枯。中国人讲顺，就是接受一切，不择地择时，更不择命。我们并不需要一个虚设的天堂，才能在这个世界上做好人。我们可以为自己预备寿材，为自己选定墓地；我们可以看孩子们不断入世，弄到穷无立锥之地，既无柏拉图之理想国，亦无但丁的地狱，有的是一堆过不完的日子，一年一节地度过去，自己辞世了，儿子们随着再过。“逝者如斯，不舍昼夜”。 在这个最紧张的抗战年头，大家更充分地表示了“过渡心理”，这是外国访问团永远不会领悟的一个谜。伦敦的居民一星期只吃一个鸡蛋，若问他们痛苦不痛苦，他们一定回答说：“是呀，这是痛苦。”若是再问他们为什么忍受这痛苦，他们一定说：“我们是用痛苦来结束痛苦。我们为了要每天有吃不完的鸡蛋，所以现在得一星期吃一个。”这个逻辑正确不正确我们且不问，可是骨子里他们是有着“吃不完的鸡蛋”的梦想，他们不肯马马虎虎过一辈子，要活个痛快。因之，平日似乎是无愁公子的美国青年，一上战场顿时会变成了无敌的飞虎。他们不但要痛快地生活，也知道痛快之来却时常以痛苦始。我们怎样呢？有多少人不在等待胜利？谁不像冬天的蚊蟋蛰伏着，盼望春雷一动？谁不是枯凋的野树，在冷风里抖动，专待春光再临。自然，春雷终究是要动的，春光终究是要来的，但是春来了还是要去的，除非我们能创造我们的春天，这春天才是自己的，才是可以留恋的，才是可以保留得住的。 “不能痛痛快快地活，不如爽爽快快地死”！哪一天中国人能了解了这一句话，他才能在这世界上做自己的主人。这时候我们的欢宴将不在除夕，而在元旦。朋友！生命不应叫岁月来消磨，是要我们去消受的呀。我们错失了这稀有的机会，哪里可以再求，快乐即使有代价，这代价也是值得付的，何况我们每个人都有着丰富的本钱。 1943年1月1日 ","date":"2024-03-06","objectID":"/posts/write/blog/%E8%BF%87%E5%B9%B4%E8%BF%87%E6%97%A5%E5%AD%90%E4%B8%8E%E8%BF%87%E6%B8%A1%E5%BF%83%E7%90%86-%E8%B4%B9%E5%AD%9D%E9%80%9A/:0:0","tags":["读书摘录"],"title":"过年，过日子与过渡心理 费孝通","uri":"/posts/write/blog/%E8%BF%87%E5%B9%B4%E8%BF%87%E6%97%A5%E5%AD%90%E4%B8%8E%E8%BF%87%E6%B8%A1%E5%BF%83%E7%90%86-%E8%B4%B9%E5%AD%9D%E9%80%9A/"},{"categories":null,"content":"卡夫卡的书，找到了两个翻译版本，会都看一下，本身是一本没有发表的草稿。","date":"2024-03-05","objectID":"/posts/write/blog/%E5%AE%A1%E5%88%A4/","tags":["读书摘录"],"title":"《审判》摘录","uri":"/posts/write/blog/%E5%AE%A1%E5%88%A4/"},{"categories":null,"content":" 审判 卡夫卡卡夫卡的书，找到了两个翻译版本，会都看一下，本身是一本没有发表的草稿。 ","date":"2024-03-05","objectID":"/posts/write/blog/%E5%AE%A1%E5%88%A4/:0:0","tags":["读书摘录"],"title":"《审判》摘录","uri":"/posts/write/blog/%E5%AE%A1%E5%88%A4/"},{"categories":null,"content":" 韩瑞祥 译罪过对法院存在着一股吸引力 不过，我一会儿就回来，然后跟你走，如果你不嫌弃我的话；你想上哪儿，我就跟到哪儿，你要我怎么都行。我只要能够尽可能长些时间离开这儿，就会感到幸福，当然，最好是永远离开这儿。 这当然是一个可以谅解的谎言，无非就是为了博取更多一些同情而已。 他跟这儿所有的人一样，爱虚荣都要发疯了。可话说回来，我也是一个爱虚荣的人，你一点也不喜欢我，叫我心里好不是滋味。 “我不喜欢她，她又粗又笨。不过，也许她对你既温柔又体贴，从照片上可以看得出来。像这么高大强壮的姑娘除了温柔和体贴别无选择。可是，她会为你而牺牲自己吗？”“不会的，”K说，“她既不温柔，也不体贴，更不会为我而牺牲自己。到现在为止，我既没有要求她要温柔体贴，也没有要求她要为我做出牺牲。其实，我从来还没有像你这样仔细地看过她的照片。” 你已经吻了我啦！”她不时地喊道，“瞧，你现在已经吻了我啦！”这时，她的膝盖滑了下去。她短促地叫了一声，差点儿倒在地毯上，K一把抓住她，还想把她扶住，结果却被她拖倒在地上。“你现在属于我了，”她说。 从根本上来说，法律并不宽容辩护，只是允许辩护而已，甚至连有关法律条文在至少可不可以理解成允许辩护这一点上也争执不休。 这个法庭比任何别的法庭都更需要有律师来插手。一般说来，诉讼过程不仅对公众保密，而且对被告亦是如此。 可法庭上的诉讼程序一般也对低一级官员保密，因此，他们连自己正在处理的案子也几乎难以全弄明白下一步怎样进行，也就是说要审理的案子出现在他们的案头上，而他们往往既不知道这案子来自何方，也不晓得将传到哪儿去。 惟一理智的做法就是听凭现状。 卡小说里常见的话,很后现代的处境。 如果要想有所得，首先必须立即摒弃任何自己可能犯有罪过的心理。根本就没有罪过可言。这种诉讼不过是一大交易而已，如同他为了给银行带来好处所做过的交易一样；在这个交易中，隐伏着各种各样的危险，正等待着你一定要去消灭掉，这就是交易的规律。为达此目的，你当然不能有犯罪的心理，而应该尽可能地抓住对自己有好处的考虑。 这么看来，律师的这种手段居然可以使委托人最终忘却整个世界，一个劲儿希望沿着这条迷途，拖着沉重的步子，艰难跋涉，直到有一天，看到案子的结局。值得庆幸的是，K对这种手段领教的时间还不够长。这样，委托人不再是委托人了，而成了律师的一条狗。如果律师命令他像钻进狗窝里一样，爬到床下去，在那里汪汪地学狗叫，他准会兴致勃勃地照办。 既然这样，我干吗要向你提什么要求呢？法院不向你提什么要求。你要来，它就收留你，你要走，它就让你走。” 他只是突然领悟到，反抗是徒劳无益的。即使他反抗，给他的陪伴制造困难，企图在反抗中还要享受生命的最后之光，也说不上是什么英勇行为。 月光把它独有的自然和宁静泻洒在人间。 逻辑虽然是不可动摇的，但它阻挡不了一个求生的人抱有种种幻想。 这正是那样一个时刻，也正是因为有这样的时刻，K才那么喜欢经理；在这短暂的时刻里，从这个体弱多病、咳嗽不止，而且工作繁忙、责任重大的人身上流露出某种对K的幸福和前程的关心。这样的关心，要让其他在经理跟前经历过同样时刻的职员来看，当然可以称做是冷酷和流于表面；它不是什么别的东西，正是一个行之有效的手段，靠着牺牲两分钟的时间，结果把能干的职员长年累月地捆缚在自己的身上，——不管怎样，在这样的时刻里，K拜倒在了经理的手下。 这样做，其实不会给K带来任何好处。但是，K简直无法改变自己的态度，他成为自欺欺人的俘虏。有时候，他深信正好现在可以无牵无挂地跟副经理较量一番，但一次次惨败的教训却不会使他翻然醒悟；他十次努力都不成功的事，却相信第十一次会如愿以偿，尽管一切自始至终都一个劲儿地朝着不利于他的方向发展。每当他这样会面以后精疲力竭，汗水淋淋，脑袋里一片空虚而留下来的时候，他并不知道是希望，还是绝望迫使他去找副经理。但是，到了下一次，却又不过是抱着赤裸裸的希望，急不可待地走到副经理的门口 ","date":"2024-03-05","objectID":"/posts/write/blog/%E5%AE%A1%E5%88%A4/:1:0","tags":["读书摘录"],"title":"《审判》摘录","uri":"/posts/write/blog/%E5%AE%A1%E5%88%A4/"},{"categories":["python入门"],"content":" python的虚拟环境虚拟环境是我们创建的一个位置，我们在里面安装包，达成一个包的隔离。有助于项目分离和依赖控制。 python -m venv ll_env创建一个虚拟环境ll_env。一般来说都是.XXX的隐藏文件夹，这里没有隐藏。 source ll_env/bin/activate来激活。 激活后可以通过deactivate来关闭 ","date":"2024-03-01","objectID":"/posts/code/language/python09/:0:0","tags":["python"],"title":"python的虚拟环境","uri":"/posts/code/language/python09/"},{"categories":null,"content":" 基督山伯爵 法 大仲马 周克希 译 “我的父亲！我的父亲在这儿？” “一点不错，”基督山回答说，“令尊大人，巴尔托洛梅奥·卡瓦尔坎蒂少校。” 惊恐的表情陡地从年轻人的眉宇间消失了。 “噢！可不是，”他说，“巴尔托洛梅奥·卡瓦尔坎蒂少校。那么，伯爵先生，您是说我那亲爱的父亲，他就在这儿？” ——您在第 797 页（位置 #12214-12217）的标注 2024-02-26 14:25:50 我觉得厌恶比仇恨更让人恶心。 ——您在第 810 页（位置 #12419-12419）的标注 2024-02-26 15:12:00 您听我说，瓦朗蒂娜，您有没有对哪个人感到过一种无法抗拒的好感？尽管您是第一次见到这个人，您却觉得像是早就认识他似的，您问自己在什么时候、在哪儿见过他，可您又想不起来时间和地点，于是您就觉得那都是在早先的另外一个世界上，而这种好感只是一种回忆的苏醒而已，您有过这种感觉吗？ ——您在第 817 页（位置 #12528-12530）的标注 2024-02-26 16:22:13 “大致上，”基督山说，“我把富人的资产分成三等：一等资产，二等资产和三等资产。拥有家产、土地、矿业，加上在法国、奥地利、英国这些国家的固定进款，折合下来总额在一亿左右的，我称为一等资产。拥有矿业开采或合股企业的股份、总督的辖地、亲王的采邑，还有不超过一百五十万法郎的年俸，合在一起总额有五千万的，我称为二等资产。最后一等是指靠复利盈利的财产，以及一份并不稳定的收益——这种收益会受他人意志或机遇好坏的影响，比如说，一家银行的倒闭，一条急报消息的误传，都会对这种收益有所影响；担着风险的投机生意，盈亏要碰运气，而这种运气相对于大自然博大无边的威力而言，只能说是微不足道的。总之，所有这些虚虚实实的资财加在一起，有一千五百万的，我称之为三等资产。 ——您在第 924 页（位置 #14158-14164）的标注 2024-02-27 17:05:49 “这就是所谓的真诚友谊：把自己只想让她当情妇的女人，去塞给别人。” ——您在第 952 页（位置 #14583-14583）的标注 2024-02-27 21:22:36 “阿拉伯有一种动人的风俗，只要在同一个屋顶下分享过面包和盐，就成了永久的朋友。” ——您在第 985 页（位置 #15091-15092）的标注 2024-02-27 22:07:26 一个人只能真正爱一次 ——您在第 986 页（位置 #15118-15118）的标注 2024-02-27 22:08:50 向您，瓦朗蒂娜？哦！天主不容我这么做！女人是不容侵犯的；我们心爱的女人是神圣的。 ——您在第 1009 页（位置 #15470-15470）的标注 2024-02-28 00:12:33 基督山走上前去，把手伸给她，她按习惯捧住这只手用嘴唇去吻。 ——您在第 1088 页（位置 #16683-16684）的标注 2024-02-28 12:48:30 这里就是说我非常不喜欢，非常明显的不对等的关系。 “住嘴吧，”神甫说，“不然你身上最后那几滴血也要流干了……喔！你不相信天主，但让你死的正是天主！……喔！你不相信天主，可是天主却只要你做一个祷告，说一句话，流一次眼泪，就能宽恕你……天主本可以让凶手的刀子当场叫你断气……可是天主给了你一刻钟时间，让你悔罪……忏悔吧，你这混蛋！悔罪吧！” ——您在第 1202 页（位置 #18428-18431）的标注 2024-02-28 17:01:35 “‘我能，先生，’海黛说着，从面纱下取出一个缎子香囊，‘这里有我的出生证明，是我父亲亲笔书写并由大臣们签署证明的。这里有我的受洗证书，父亲同意我皈依母亲的宗教，所以马其顿和伊庇鲁斯的大主教都在证书上盖了印。这里还有（这当然是最重要的证据）证明那个法兰克军官把我和母亲卖给亚美尼亚奴隶贩子埃尔——科比尔的买卖文契。那个法兰克军官在跟土耳其宫廷的肮脏交易中，把他恩主的妻子和女儿作为战利品，卖了一千蒲尔斯，也就是差不多四十万法郎的价钱。’ ——您在第 1239 页（位置 #18989-18993）的标注 2024-02-29 00:01:55 一般来说法律证明是困难的。所以比较爽文 ——您在第 1239 页（位置 #18993）的笔记 2024-02-29 00:03:02 谢天谢地，那种儿子要为父亲的行为负责、充满偏见的不公正的时代早就过去了。回想一下您以前的生活吧，阿尔贝。 ——您在第 1245 页（位置 #19077-19078）的标注 2024-02-29 00:07:51 “您问真正的原因，莫雷尔？”伯爵说，“那个年轻人自己也是瞎撞一气，并不知道真正的原因。真正的原因，只有我和天主才知道；但我可以凭我的名誉担保，莫雷尔，天主不仅知道真正的原因，而且是会站在我一边的。” ——您在第 1264 页（位置 #19370-19372）的标注 2024-02-29 00:23:42 我讨厌的一点 ——您在第 1264 页（位置 #19372）的笔记 2024-02-29 00:23:58 “可您为什么要去代替天主呢？” ——您在第 1267 页（位置 #19416-19416）的标注 2024-02-29 00:25:54 梅塞苔丝，”基督山重复说，“梅塞苔丝！噢！是的，您说得有理，我说着这个名字时依然觉得那么甜美，这是许多年以来第一次从我嘴里这么清楚地说出这个名字。哦！梅塞苔丝，您的这个名字，我曾经满怀惆怅长吁短叹地呼唤过它，我曾经在痛苦的呻吟中呼唤过它，也曾在绝望的喘息中呼唤过它。在严寒刺骨的冬天，我在地牢的麦秸堆上冻得发抖时呼唤过它；在酷暑难熬的夏天，我在牢房的石板地上辗转反侧时呼唤过它。梅塞苔丝，我非得为自己报仇不可，因为我受了十四年折磨，我哭泣、诅咒了十四年；现在，我对您说，梅塞苔丝，我非得为自己报仇不可！” ——您在第 1270 页（位置 #19462-19467）的标注 2024-02-29 00:28:55 “《圣经》里写道，”基督山回答说，“‘父亲作的恶，将报应在子女身上，直到第三代和第四代。’既然天主授意先知这么写，为什么我得比天主更仁慈呢？” “因为天主拥有时间和永恒，而人是无法拥有这两样东西的。” ——您在第 1270 页（位置 #19470-19472）的标注 2024-02-29 00:29:36 旧约糟粕的犹太教遗产了属于是。在今天，父债子偿显得好像也没有那么过时，我们和大仲马的时代又有多远呢？ “难道您以为我当着那么些人的面，当着您的朋友和您儿子的朋友的面，在大庭广众受了侮辱，受了一个会把我的宽宏大量当作他的胜利去炫耀的毛头小伙子的挑衅，难道您以为，我还会有一丁半点苟且活下去的想法吗？我最爱的，除了您，梅塞苔丝，就是我自己，也就是说，就是我的尊严，就是这种使我得以超越于其他人之上的力量；这种力量，就是我的生命。现在您用一句话摧毁了它。我只能死了。” “可是埃德蒙，既然您宽恕了他，决斗就不会进行了。” “决斗还是会进行的，夫人，”基督山神情庄严地说，“但流到地上的，不会是您儿子的血，而会是我的血。 ——您在第 1272 页（位置 #19498-19504）的标注 2024-02-29 00:32:09 “都是天意啊！”他喃喃地说，“呵！今天我才完全相信，我真是天主的使者！” ——您在第 1290 页（位置 #19778-19779）的标注 2024-02-29 09:51:08 啊？ ——您在第 1290 页（位置 #19779）的笔记 2024-02-29 09:51:23 因为，就连今天蒙在她身上的灾难的阴影，也并非她应该承受的，而天主是不会愿意看到一个无辜的人去为一个罪人赎罪的。 ——您在第 1297 页（位置 #19882-19883）的标注 2024-02-29 09:56:53 不信,比如耶稣 ——您在第 1297 页（位置 #19883）的笔记 2024-02-29 09:57:16 “但对伯爵夫人，对阿尔贝，却并不是不幸，”基督山说，“一个死去的父亲和丈夫，胜过一个名誉扫地的父亲和丈夫；血能洗去耻辱。” ——您在第 1322 页（位置 #20268-20269）的标注 2024-02-29 10:22:35 因为生活就意味着我们的希望一次又一次的、永无休止的遇险） ——您在第 1339 页（位置 #20519-20520）的标注 2024-02-29 10:32:44 “哦！不，先生，从我小时候起，我就对我身边的事情看得太多，懂得太多，以致我遭到的不幸无法再在心灵上留下它本该留下的印象了。从我懂事的时候起，我就没有被人爱过，这是我的不幸！这样我自然也就谁都不爱了，这又是我的万幸！现在，您知道我的处世哲学了吧。” ——您在第 1342 页（位置 #20577-20580）的标注 2024-02-29 10:36:21 遭遇重大灾祸时，廉价的安慰只会使最好的朋友也变得令人腻烦，所以客人在这种情况下所能做的事，就是尽快离开。 ——您在第 1361 页（位置 #20854-20855）的标注 2024-02-29 13:03:46 “行啊。” “你在看什么？” “我在看你。真的，你这样挺可爱；人家会说你诱拐我私奔呢。” “妈的！他们算说对了。” “喔！你在说粗话啦，欧仁妮？” 两个姑娘，旁人十有八九以为一个在为自己，另一个在为朋友哭哭啼啼的这两个姑娘，居然开怀大笑起来。 ——您在第 1366 页（位置 #20936-20940）的标注 2024-02-29 13:11:07 “因为我发现每个人都是有罪的，而我每惩罚一个罪人，都好像是在用一个","date":"2024-02-27","objectID":"/posts/write/blog/%E5%9F%BA%E7%9D%A3%E5%B1%B1%E4%BC%AF%E7%88%B5/:0:0","tags":["读书摘录"],"title":"基督山伯爵摘录","uri":"/posts/write/blog/%E5%9F%BA%E7%9D%A3%E5%B1%B1%E4%BC%AF%E7%88%B5/"},{"categories":["python入门"],"content":"主要介绍一下怎么用python里的unittest模块中的测试工具来写测试代码。","date":"2024-02-19","objectID":"/posts/code/language/python08/","tags":["python"],"title":"python的测试","uri":"/posts/code/language/python08/"},{"categories":["python入门"],"content":" 测试用实例代码name_function.py def get_formatted_name(first, last, middle=\"\"): '''生成整洁的姓名''' if middle: full_name = f\"{first} {middle} {last}\" else: full_name = f\"{first} {last}\" return full_name.title()names.py from name_function import get_formatted_name print(\"Enter 'q' at any time to quit.\") while True: first = input(\"\\nplease give me a first name:\") if first == 'q': break last = input(\"please give me a last name:\") if last == 'q': break format_name = get_formatted_name(first, last) print(f\"\\tNeatly formatted name: {format_name}.\")","date":"2024-02-19","objectID":"/posts/code/language/python08/:1:0","tags":["python"],"title":"python的测试","uri":"/posts/code/language/python08/"},{"categories":["python入门"],"content":" 测试Python标准库中的模块unittest 提供了代码测试工具。单元测试 用于核实函数的某个方面没有问题。测试用例 是一组单元测试，它们一道核实函数在各种情形下的行为都符合要求。良好的测试用例考虑到了函数可能收到的各种输入，包含针对所有这些情形的测试。全覆盖 的测试用例包含一整套单元测试，涵盖了各种可能的函数使用方式。对于大型项目，要进行全覆盖测试可能很难。 下面的测试用例只包含一个方法，它检查函数get_formatted_name在给定名和姓的时候能否正确工作 test_name_function.py import unittest from name_function import get_formatted_name class NameTestCase(unittest.TestCase): '''测试name_function.py''' def test_first_last_name(self): formatted_name = get_formatted_name('janis', 'joplin') self.assertEqual(formatted_name, 'Janis Joplin') def test_first_last_middle_name(self): '''能够正确处理像Wolfgang Amadeus Mozart这样的姓名吗？''' formatted_name = get_formatted_name('wolfgang', 'mozart', 'amadeus') self.assertEqual(formatted_name, 'Wolfgang Amadeus Mozart') if __name__ == '__main__': unittest.main()方法setUp()在测试类的时候用到。unittest.TestCase 类包含的方法setUp() 让我们只需创建这些对象一次，就能在每个测试方法中使用。 ","date":"2024-02-19","objectID":"/posts/code/language/python08/:2:0","tags":["python"],"title":"python的测试","uri":"/posts/code/language/python08/"},{"categories":["python入门"],"content":"文件操作和简单的异常处理","date":"2024-02-18","objectID":"/posts/code/language/python07/","tags":["python"],"title":"python的文件读取和异常","uri":"/posts/code/language/python07/"},{"categories":["python入门"],"content":" 读取文件我们创建一个test.txt，然后读取。 with open(\"test.txt\") as file_object: contents = file_object.read() print(contents)要想读取任何一个文件，都需要先打开文件，才能访问它。open()返回一个表示文件text.txt的对象，python把对象赋值给file_object。在C里文件打开后，使用完成要关闭，不然会出现异常。python用上述结构，python会帮你关闭。 注意相对路径和绝对路径的问题。 open有两个参数，第二个可以指定以哪种模式打开。如果省略就是默认的只读模式。 注意，with结构open返回的文件对象只在with代码块内可以使用，要在代码块外访问文件的内容，可以在with代码块内将文件的各行存储在一个列表里，在代码块外使用该列表。上文content也是一样的。 with open(\"test.txt\") as file_object: lines = file_object.readlines() for line in lines: print(line.rstrip())","date":"2024-02-18","objectID":"/posts/code/language/python07/:1:0","tags":["python"],"title":"python的文件读取和异常","uri":"/posts/code/language/python07/"},{"categories":["python入门"],"content":" 写入文件open有两个参数，第二个可以指定以哪种模式打开。 参数 模式 r 读 w 写 a 附加 r+ 读写 w 在写入的时候，如果文件不存在，会创建文件。 filename = \"test.txt\" with open(filename, \"w\") as file_object: file_object.write(\"Hello World!\")注意： python只能将字符串写入文本文件，要将数值存储到txt文件里，必须要用函数str()，转换成字符串。 写入多行的时候记得加换行符\\n 写入会覆盖源文件的内容。如果想要在后面附加内容，保留源文件的内容，那么选择以附加模式打开文件。 ","date":"2024-02-18","objectID":"/posts/code/language/python07/:2:0","tags":["python"],"title":"python的文件读取和异常","uri":"/posts/code/language/python07/"},{"categories":["python入门"],"content":" 处理异常在这里以一个简单的错误作为例子，5/0导致ZeroDivisioError异常 print(5/0) ZeroDivisionError: division by zero使用tr-except代码块： try: print(5/0) except ZeroDivisionError: print(\"You can't divide by zero!\")try中的代码正常运行，就跳过except的内容，否则运行后边的内容，而不再traceback。继续运行下边可能存在的代码。 如果希望在发生错误的时候什么也不做（静默），那么用pass语句 try: print(6/2) print(5/0) except ZeroDivisionError: pass只会得到结果3.0的输出。 ","date":"2024-02-18","objectID":"/posts/code/language/python07/:3:0","tags":["python"],"title":"python的文件读取和异常","uri":"/posts/code/language/python07/"},{"categories":["python入门"],"content":" 用json文件存储数据json.dump()和json.load() import json numbers = [2, 3, 5, 7, 11, 13] filename = \"test.json\" with open(filename, 'w') as file: json.dump(numbers, file)打开文件就能看到结果。 读取的话： import json filename = \"test.json\" with open(filename, 'r') as file: result = json.load(file) print(result)","date":"2024-02-18","objectID":"/posts/code/language/python07/:4:0","tags":["python"],"title":"python的文件读取和异常","uri":"/posts/code/language/python07/"},{"categories":["python入门"],"content":"关于类的大概介绍","date":"2024-02-17","objectID":"/posts/code/language/python06/","tags":["python"],"title":"python的类","uri":"/posts/code/language/python06/"},{"categories":["python入门"],"content":" python的类","date":"2024-02-17","objectID":"/posts/code/language/python06/:1:0","tags":["python"],"title":"python的类","uri":"/posts/code/language/python06/"},{"categories":["python入门"],"content":" 方法__init__()__init()__是一个特殊的类中的函数。每当根据类来创建实体的时候，Python都会自动调用它来完成构建。在此函数里，形参self 必不可少，而且必须位于其他形参的前面。如： class Dog: \"\"\"一次模拟小狗的简单尝试。\"\"\" def __init__(self, name, age): \"\"\"初始化属性name和age。\"\"\" self.name = name self.age = age self.color = \"write\" def sit(self): \"\"\"模拟小狗收到命令时蹲下。\"\"\" print(f\"{self.name} is now sitting.\") def roll_over(self): \"\"\"模拟小狗收到命令时打滚。\"\"\" print(f\"{self.name} rolled over!\")生成一个实例mydog： mydog = Dog(name=\"tom\", age=6) print(f\"My dog's name is {mydog.name}.\") my_dog.sit() my_dog.roll_over()创建实例时，有些属性无须通过形参来定义，可在方法__init__() 中为其指定默认值。 ","date":"2024-02-17","objectID":"/posts/code/language/python06/:1:1","tags":["python"],"title":"python的类","uri":"/posts/code/language/python06/"},{"categories":["python入门"],"content":" 类的继承在既有类的基础上编写新类时，通常要调用父类的方法__init__() 。这将初始化在父类__init__() 方法中定义的所有属性，从而让子类包含这些属性。 父类Car： class Car: def __init__(self, make, model, year): self.make = make self.model = model self.year = year self.odometer_reading = 0 def get_description_name(self): long_name = f\"{self.year} {self.make} {self.model}\" return long_name def read_odometer(self): print(f\"This car has {self.read_odometer} miles on it.\") def update_odometer(self, mileage): if mileage \u003e= self.odometer_reading: self.odometer_reading = mileage else: print(\"You can't roll back an odometer!\") def increment_odometer(self, miles): self.odometer_reading += miles现在定义子类ElectricCar： class ElectricCar(Car): def __init__(self, make, model, year): super().__init__(make, model, year) self.battery_size = 75 def describe_battery(self): '''打印一条电瓶容量的信息''' print(f\"This car has a{self.battery_size}-kWh battery.\")在圆括号内指定父类的名称，super() 是一个特殊函数，让你能够调用父类的方法。这行代码让Python调用Car 类的方法__init__() ，让ElectricCar 实例包含这个方法中定义的所有属性。父类也称为超类 （superclass），名称super 由此而来。 上述类保存在car.py，现在调用一下： import car my_car = car.ElectricCar('tesla', 'roadster', 2019) my_car.get_range() my_car.read_odometer() my_car.fill_gas_tank()导入类的规则和导入函数的规则是一样的，也都可以导入别名。 ","date":"2024-02-17","objectID":"/posts/code/language/python06/:1:2","tags":["python"],"title":"python的类","uri":"/posts/code/language/python06/"},{"categories":["python入门"],"content":" python的标准库是一组模块，安装python都包含它。可以调用这些模块。 不是标准库的外部模块需要从外部下载。 ","date":"2024-02-17","objectID":"/posts/code/language/python06/:1:3","tags":["python"],"title":"python的类","uri":"/posts/code/language/python06/"},{"categories":["python入门"],"content":"关于python的函数的大概用法","date":"2024-02-16","objectID":"/posts/code/language/python05/","tags":["python"],"title":"python的函数","uri":"/posts/code/language/python05/"},{"categories":["python入门"],"content":" python的函数def greet_user(username): \"\"\"显示简单的问候语。\"\"\" print(f\"Hello, {username.title()}!\") greet_user(\"tom\") greet_user(username=\"linda\") def describe_pet(pet_name, animal_type='dog'): \"\"\"显示宠物的信息。\"\"\" print(f\"\\nI have a {animal_type}.\") print(f\"My {animal_type}'s name is {pet_name.title()}.\") describe_pet(pet_name='willie')","date":"2024-02-16","objectID":"/posts/code/language/python05/:1:0","tags":["python"],"title":"python的函数","uri":"/posts/code/language/python05/"},{"categories":["python入门"],"content":" 传递任意数量的实参def make_pizza(size, *toppings): \"\"\"概述要制作的比萨。\"\"\" print(f\"\\nMaking a {size}-inch pizza with the following toppings:\") for topping in toppings: print(f\"- {topping}\") make_pizza(16, 'pepperoni') make_pizza(12, 'mushrooms', 'green peppers', 'extra cheese')注意*toopings放在最后。 ","date":"2024-02-16","objectID":"/posts/code/language/python05/:1:1","tags":["python"],"title":"python的函数","uri":"/posts/code/language/python05/"},{"categories":["python入门"],"content":" 使用任意数量的关键字实参有时候，需要接受任意数量的实参，但预先不知道传递给函数的会是什么样的信息。在这种情况下，可将函数编写成能够接受任意数量的键值对——调用语句提供了多少就接受多少。 def build_profile(first, last, **user_info): \"\"\"创建一个字典，其中包含我们知道的有关用户的一切。\"\"\" user_info['first_name'] = first user_info['last_name'] = last return user_info user_profile = build_profile('albert', 'einstein', location='princeton', field='physics') print(user_profile) \"\"\" 输出： {'location': 'princeton', 'field': 'physics', 'first_name': 'albert', 'last_name': 'einstein'} \"\"\"形参**user_info 中的两个星号让Python创建一个名为user_info 的空字典，并将收到的所有名称值对都放到这个字典中。 ","date":"2024-02-16","objectID":"/posts/code/language/python05/:1:2","tags":["python"],"title":"python的函数","uri":"/posts/code/language/python05/"},{"categories":["python入门"],"content":" 将函数导入存储在模块里使用函数的优点之一是可将代码块与主程序分离。通过给函数指定描述性名称，可让主程序容易理解得多。将函数放在独立的,py文件也就是模块里，通过import语句在当前的代码中调用。 创建pizza.py： def make_pizza(size, *toppings): \"\"\"概述要制作的比萨。\"\"\" print(f\"\\nMaking a {size}-inch pizza with the following toppings:\") for topping in toppings: print(f\"- {topping}\")在主文件里： import pizza pizza.make_pizza(16, 'pepperoni')或者 导入特定的一个或者多个函数： from pizza import make_pizza make_pizza(16, 'pepperoni')导入多个就继续写在make_pizza后边。 ","date":"2024-02-16","objectID":"/posts/code/language/python05/:1:3","tags":["python"],"title":"python的函数","uri":"/posts/code/language/python05/"},{"categories":["python入门"],"content":" as给导入函数或者模块指定别名如果导入的函数名字与主文件冲突或者太长，可以用as指定别名： from pizza import make_pizza as mp mp(16, 'pepperoni')也可以给整个模块指定别名： import pizza as p p.make_pizza(16, 'pepperoni')","date":"2024-02-16","objectID":"/posts/code/language/python05/:1:4","tags":["python"],"title":"python的函数","uri":"/posts/code/language/python05/"},{"categories":["python入门"],"content":"关于python的字典的介绍和基本使用","date":"2024-02-15","objectID":"/posts/code/language/python04/","tags":["python"],"title":"python的字典","uri":"/posts/code/language/python04/"},{"categories":["python入门"],"content":" 字典字典是一系列的键值对，每个键值对是一个键和与键对应关联的值，可以通过访问键的形式来返回键对应的值。字典用{}来表示。 alien = {} # 创建空字典 alien_0 = {'color': 'green', 'points': 5} #创建非空字典 print(alien_0['color']) # 返回green alien_0['x_position'] = 0 # 添加键值对删除字典的键值对： del alien_0['x_position']删除后值会永远消失，注意。 ","date":"2024-02-15","objectID":"/posts/code/language/python04/:1:0","tags":["python"],"title":"python的字典","uri":"/posts/code/language/python04/"},{"categories":["python入门"],"content":" 使用get()来访问值对比直接调用的好处是可以设置错误返回值，这样的话当不存在键值对和值等情况可以更好应对。 alien_0 = {'color': 'green', 'speed': 'slow'} print(alien_0['points']) # 输出错误显示 KeyError: 'points'因为不存在points，所以报错了，程序不会正常启动。这种情况下，可以使用get()。 方法get() 的第一个参数用于指定键，是必不可少的；第二个参数为指定的键不存在时要返回的值，是可选的，在不填的情况下默认返回None。在下文里会返回指定的参数：No point value assigned。 alien_0 = {'color': 'green', 'speed': 'slow'} point_value = alien_0.get('points', 'No point value assigned.') print(point_value)","date":"2024-02-15","objectID":"/posts/code/language/python04/:2:0","tags":["python"],"title":"python的字典","uri":"/posts/code/language/python04/"},{"categories":["python入门"],"content":" 遍历字典for循环来遍历字典里所有的键和值。 user_0 = { 'username': 'efermi', 'first': 'enrico', 'last': 'fermi', } for key, value in user_0.items(): print(f\"Key: {key}\") print(f\"Value: {value}\")遍历所有的键，字典默认遍历的就是键的值，所以可以直接： for key in user_0: print(key)另外可以用keys()方法： for key in user_0.keys(): print(key)遍历字典中的值： for key in user_0.values(): print(key)这种做法提取字典中所有的值，不考虑是否重复。 想要剔除重复项目得到集合，可以用set()方法。使用{}创建集合。 for key in set(user_0.values()): print(key) values = set(user_0.values()) print(values) # 输出 {'efermi', 'fermi', 'enrico'}","date":"2024-02-15","objectID":"/posts/code/language/python04/:3:0","tags":["python"],"title":"python的字典","uri":"/posts/code/language/python04/"},{"categories":["python入门"],"content":" 嵌套有时候，需要将一系列字典存储在列表中，或将列表作为值存储在字典中，这称为嵌套 。你可以在列表中嵌套字典、在字典中嵌套列表甚至在字典中嵌套字典。 ","date":"2024-02-15","objectID":"/posts/code/language/python04/:4:0","tags":["python"],"title":"python的字典","uri":"/posts/code/language/python04/"},{"categories":["python入门"],"content":" 字典列表alien_0 = {'color': 'green', 'points': 5} alien_1 = {'color': 'yellow', 'points': 10} alien_2 = {'color': 'red', 'points': 15} aliens = [alien_0, alien_1, alien_2] for alien in aliens: print(alien)输出： {‘color’: ‘green’, ‘points’: 5} {‘color’: ‘yellow’, ‘points’: 10} {‘color’: ‘red’, ‘points’: 15} ","date":"2024-02-15","objectID":"/posts/code/language/python04/:4:1","tags":["python"],"title":"python的字典","uri":"/posts/code/language/python04/"},{"categories":["python入门"],"content":" 在字典里存储列表pizza = { 'crust': 'thick', 'toppings': ['mushrooms', 'extra cheese'], } print(f\"You ordered a {pizza['crust']}-crust pizza \" \"with the following toppings:\") for topping in pizza['toppings']: print(topping)","date":"2024-02-15","objectID":"/posts/code/language/python04/:4:2","tags":["python"],"title":"python的字典","uri":"/posts/code/language/python04/"},{"categories":["python入门"],"content":" 在字典里存储字典users = { 'aeinstein': { 'first': 'albert', 'last': 'einstein', 'location': 'princeton', }, 'mcurie': { 'first': 'marie', 'last': 'curie', 'location': 'paris', }, } for username, user_info in users.items(): print(f\"\\nUsername: {username}\") full_name = f\"{user_info['first']} {user_info['last']}\" location = user_info['location'] print(f\"\\tFull name: {full_name.title()}\") print(f\"\\tLocation: {location.title()}\")","date":"2024-02-15","objectID":"/posts/code/language/python04/:4:3","tags":["python"],"title":"python的字典","uri":"/posts/code/language/python04/"},{"categories":["python入门"],"content":"if and or的用法举例","date":"2024-02-13","objectID":"/posts/code/language/python03/","tags":["python"],"title":"python的if,and,or","uri":"/posts/code/language/python03/"},{"categories":["python入门"],"content":" if一个简单的实例： cars = ['audi', 'bmw', 'subaru', 'toyota'] for car in cars: if car == 'bmw': print(car.upper()) elif car == 'audi' print(car.lower()) else: print(car.title())","date":"2024-02-13","objectID":"/posts/code/language/python03/:1:0","tags":["python"],"title":"python的if,and,or","uri":"/posts/code/language/python03/"},{"categories":["python入门"],"content":" 判断条件a == b #等于 a != b #不等于 a \u003e b a \u003c b a \u003e= b a \u003c= b (a \u003e b) and (a = b) #与 (a \u003e b) or (a = b) #或 cat in cats #返回True/False cat not in cats #返回True/False if cats #判断是不是空的列表大概这样的，和C差不多不过有点区别。 ","date":"2024-02-13","objectID":"/posts/code/language/python03/:2:0","tags":["python"],"title":"python的if,and,or","uri":"/posts/code/language/python03/"},{"categories":["python入门"],"content":"关于列表的一些记录","date":"2024-02-12","objectID":"/posts/code/language/python01/","tags":["python"],"title":"python的列表 list","uri":"/posts/code/language/python01/"},{"categories":["python入门"],"content":" python的列表 list列表我觉得是python里自己的很独特的一个数据结构。生成也很简单。应该空的列表。list = []很简单。python不像C++那样指定变量的类型。变量的定义和赋值都非常简单。列表也是一样的。 list = [] list1 = [1,2,3] list2 = ['hello','world']很适合处理字符。 关于列表的遍历，一个for循环就可以了。直接print列表的话，得到的是['hello','world']这样代[]的数据，遍历的话可以这样： lists = ['hello','world'] for list in lists: print(list)","date":"2024-02-12","objectID":"/posts/code/language/python01/:1:0","tags":["python"],"title":"python的列表 list","uri":"/posts/code/language/python01/"},{"categories":["python入门"],"content":" 列表的一部分：切片要创建切片，可指定要使用的第一个元素和最后一个元素的索引。与函数range() 一样，Python在到达第二个索引之前的元素后停止。要输出列表中的前三个元素，需要指定索引0和3，这将返回索引为0、1和2的元素。 players = ['charles', 'martina', 'michael', 'florence', 'eli'] print(players[0:3])players[:3]：从0开始到第三个元素结束。 players[-3:]：后三个元素 players[:]：遍历整个切片 ","date":"2024-02-12","objectID":"/posts/code/language/python01/:2:0","tags":["python"],"title":"python的列表 list","uri":"/posts/code/language/python01/"},{"categories":["python入门"],"content":" 关于赋值的一些问题my_foods = ['pizza', 'falafel', 'carrot cake'] # 这行不通: friend_foods = my_foods my_foods.append('cannoli') friend_foods.append('ice cream') print(\"My favorite foods are:\") print(my_foods) print(\"\\nMy friend's favorite foods are:\") print(friend_foods)得到两个一样的输出。这个时候想达到效果用切片： friend_foods = my_foods[:] my_foods.append('cannoli') friend_foods.append('ice cream') print(\"My favorite foods are:\") print(my_foods) print(\"\\nMy friend's favorite foods are:\") print(friend_foods)切片的一种用法。 ","date":"2024-02-12","objectID":"/posts/code/language/python01/:3:0","tags":["python"],"title":"python的列表 list","uri":"/posts/code/language/python01/"},{"categories":["python入门"],"content":"关于python的元祖的记录","date":"2024-02-12","objectID":"/posts/code/language/python02/","tags":["python"],"title":"python的元祖","uri":"/posts/code/language/python02/"},{"categories":["python入门"],"content":" python的元祖元组看起来很像列表，但使用圆括号而非中括号来标识。定义元组后，就可使用索引来访问其元素，就像访问列表元素一样。 例如，如果有一个大小不应改变的矩形，可将其长度和宽度存储在一个元组中，从而确保它们是不能修改的。 dimensions = (200, 50) print(dimensions[0]) print(dimensions[1])如果要定义只包含一个元素的元组，必须在这个元素后面加上逗号: my_t = (3,)也可以像列表一样遍历，修改其中的具体的值。 dem = (200, 500) print(dem) dem = (100, 300) print(dem)除了不能改变大小和列表是一样的。 ","date":"2024-02-12","objectID":"/posts/code/language/python02/:1:0","tags":["python"],"title":"python的元祖","uri":"/posts/code/language/python02/"},{"categories":null,"content":" Hello Worldhello world 你好世界 ","date":"2024-02-11","objectID":"/posts/code/object/test/:1:0","tags":null,"title":"test post","uri":"/posts/code/object/test/"},{"categories":null,"content":"for test","date":"2024-02-11","objectID":"/posts/write/blog/test/","tags":["test"],"title":"test post","uri":"/posts/write/blog/test/"},{"categories":null,"content":"“我的父亲！我的父亲在这儿？” “一点不错，”基督山回答说，“令尊大人，巴尔托洛梅奥·卡瓦尔坎蒂少校。” 惊恐的表情陡地从年轻人的眉宇间消失了。 “噢！可不是，”他说，“巴尔托洛梅奥·卡瓦尔坎蒂少校。那么，伯爵先生，您是说我那亲爱的父亲，他就在这儿？” 我觉得厌恶比仇恨更让人恶心 您听我说，瓦朗蒂娜，您有没有对哪个人感到过一种无法抗拒的好感？尽管您是第一次见到这个人，您却觉得像是早就认识他似的，您问自己在什么时候、在哪儿见过他，可您又想不起来时间和地点，于是您就觉得那都是在早先的另外一个世界上，而这种好感只是一种回忆的苏醒而已，您有过这种感觉吗？ “大致上，”基督山说，“我把富人的资产分成三等：一等资产，二等资产和三等资产。拥有家产、土地、矿业，加上在法国、奥地利、英国这些国家的固定进款，折合下来总额在一亿左右的，我称为一等资产。拥有矿业开采或合股企业的股份、总督的辖地、亲王的采邑，还有不超过一百五十万法郎的年俸，合在一起总额有五千万的，我称为二等资产。最后一等是指靠复利盈利的财产，以及一份并不稳定的收益——这种收益会受他人意志或机遇好坏的影响，比如说，一家银行的倒闭，一条急报消息的误传，都会对这种收益有所影响；担着风险的投机生意，盈亏要碰运气，而这种运气相对于大自然博大无边的威力而言，只能说是微不足道的。总之，所有这些虚虚实实的资财加在一起，有一千五百万的，我称之为三等资产 “这就是所谓的真诚友谊：把自己只想让她当情妇的女人，去塞给别人。” “阿拉伯有一种动人的风俗，只要在同一个屋顶下分享过面包和盐，就成了永久的朋友。” 一个人只能真正爱一次 向您，瓦朗蒂娜？哦！天主不容我这么做！女人是不容侵犯的；我们心爱的女人是神圣的 基督山走上前去，把手伸给她，她按习惯捧住这只手用嘴唇去吻 “住嘴吧，”神甫说，“不然你身上最后那几滴血也要流干了……喔！你不相信天主，但让你死的正是天主！……喔！你不相信天主，可是天主却只要你做一个祷告，说一句话，流一次眼泪，就能宽恕你……天主本可以让凶手的刀子当场叫你断气……可是天主给了你一刻钟时间，让你悔罪……忏悔吧，你这混蛋！悔罪吧！” “‘我能，先生，’海黛说着，从面纱下取出一个缎子香囊，‘这里有我的出生证明，是我父亲亲笔书写并由大臣们签署证明的。这里有我的受洗证书，父亲同意我皈依母亲的宗教，所以马其顿和伊庇鲁斯的大主教都在证书上盖了印。这里还有（这当然是最重要的证据）证明那个法兰克军官把我和母亲卖给亚美尼亚奴隶贩子埃尔——科比尔的买卖文契。那个法兰克军官在跟土耳其宫廷的肮脏交易中，把他恩主的妻子和女儿作为战利品，卖了一千蒲尔斯，也就是差不多四十万法郎的价钱。’ 一般来说法律证明是困难的。所以比较爽文 谢天谢地，那种儿子要为父亲的行为负责、充满偏见的不公正的时代早就过去了。回想一下您以前的生活吧，阿尔贝 “您问真正的原因，莫雷尔？”伯爵说，“那个年轻人自己也是瞎撞一气，并不知道真正的原因。真正的原因，只有我和天主才知道；但我可以凭我的名誉担保，莫雷尔，天主不仅知道真正的原因，而且是会站在我一边的。” 我讨厌的一点 “可您为什么要去代替天主呢？” 梅塞苔丝，”基督山重复说，“梅塞苔丝！噢！是的，您说得有理，我说着这个名字时依然觉得那么甜美，这是许多年以来第一次从我嘴里这么清楚地说出这个名字。哦！梅塞苔丝，您的这个名字，我曾经满怀惆怅长吁短叹地呼唤过它，我曾经在痛苦的呻吟中呼唤过它，也曾在绝望的喘息中呼唤过它。在严寒刺骨的冬天，我在地牢的麦秸堆上冻得发抖时呼唤过它；在酷暑难熬的夏天，我在牢房的石板地上辗转反侧时呼唤过它。梅塞苔丝，我非得为自己报仇不可，因为我受了十四年折磨，我哭泣、诅咒了十四年；现在，我对您说，梅塞苔丝，我非得为自己报仇不可！” “《圣经》里写道，”基督山回答说，“‘父亲作的恶，将报应在子女身上，直到第三代和第四代。’既然天主授意先知这么写，为什么我得比天主更仁慈呢？” “因为天主拥有时间和永恒，而人是无法拥有这两样东西的。” “难道您以为我当着那么些人的面，当着您的朋友和您儿子的朋友的面，在大庭广众受了侮辱，受了一个会把我的宽宏大量当作他的胜利去炫耀的毛头小伙子的挑衅，难道您以为，我还会有一丁半点苟且活下去的想法吗？我最爱的，除了您，梅塞苔丝，就是我自己，也就是说，就是我的尊严，就是这种使我得以超越于其他人之上的力量；这种力量，就是我的生命。现在您用一句话摧毁了它。我只能死了。” “可是埃德蒙，既然您宽恕了他，决斗就不会进行了。” “决斗还是会进行的，夫人，”基督山神情庄严地说，“但流到地上的，不会是您儿子的血，而会是我的血 “都是天意啊！”他喃喃地说，“呵！今天我才完全相信，我真是天主的使者！” 啊？ 因为，就连今天蒙在她身上的灾难的阴影，也并非她应该承受的，而天主是不会愿意看到一个无辜的人去为一个罪人赎罪的 不信,比如耶稣 “但对伯爵夫人，对阿尔贝，却并不是不幸，”基督山说，“一个死去的父亲和丈夫，胜过一个名誉扫地的父亲和丈夫；血能洗去耻辱。” 因为生活就意味着我们的希望一次又一次的、永无休止的遇险） “哦！不，先生，从我小时候起，我就对我身边的事情看得太多，懂得太多，以致我遭到的不幸无法再在心灵上留下它本该留下的印象了。从我懂事的时候起，我就没有被人爱过，这是我的不幸！这样我自然也就谁都不爱了，这又是我的万幸！现在，您知道我的处世哲学了吧。” 遭遇重大灾祸时，廉价的安慰只会使最好的朋友也变得令人腻烦，所以客人在这种情况下所能做的事，就是尽快离开 “行啊。” “你在看什么？” “我在看你。真的，你这样挺可爱；人家会说你诱拐我私奔呢。” “妈的！他们算说对了。” “喔！你在说粗话啦，欧仁妮？” 两个姑娘，旁人十有八九以为一个在为自己，另一个在为朋友哭哭啼啼的这两个姑娘，居然开怀大笑起来 “因为我发现每个人都是有罪的，而我每惩罚一个罪人，都好像是在用一个活生生的例子再一次向自己证明，我并不比别人更坏些！哦！哦！人人都是坏人，夫人，让我们来证明这一点，让我们来严惩坏人吧！” 这幅景象对她有一种不可抗拒的吸引力——死并不意味变形，只是寂然不动而已，死依然神秘，并不让人厌恶 ‘哪怕出的事再多，有钱就能找到安慰 莫雷尔抓住伯爵的手吻着；伯爵任凭他这么做，仿佛他意识到，这样的崇拜他是受之无愧的 爹 ……我曾经拥有虔诚、纯洁和爱情，那三样使人变成天使的幸福我都有过，而我却那么可耻，我居然对天主感到过怀疑！” “有些人，”她继续说，“是命中注定只要做错一件事就得毁掉终生幸福的。我当时既然以为您死了，那我本来也该去死的；因为，把对您的哀悼永远藏在心里又有什么好处呢？ “您得当心哪，夫人，”基督山说，“我们崇拜天主，可不是像您这么做的哟！天主希望我们理解他，希望我们对他的权力提出异议；正因为这样，他才给了我们自由意志。” “他在叫您，”伯爵说，“他在昏睡中呼喊着您，您把自己的生命托付给了他，死神却曾经想把你们拆开。但幸亏我在那儿，战胜了死神！瓦朗蒂娜，从今以后，你们在人世间再也不会分离了。他为了找到您，曾经勇敢地迈进过坟墓。要是没有我，你俩都早已死了；是我使你们团聚的，天主是可以把我救下的这两条性命记在我的账上的！” 啊？ ","date":"2024-02-11","objectID":"/posts/write/blog/test/:0:0","tags":["test"],"title":"test post","uri":"/posts/write/blog/test/"},{"categories":null,"content":" Hello Worldhello world 你好世界 ","date":"2024-02-11","objectID":"/posts/write/shout/test/:1:0","tags":null,"title":"test post","uri":"/posts/write/shout/test/"}]