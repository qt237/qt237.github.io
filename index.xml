<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>qt237的code记录 on qt237的博客</title>
    <link>https://qt237.github.io/</link>
    <description>Recent content in qt237的code记录 on qt237的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 15 Feb 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://qt237.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>python的字典</title>
      <link>https://qt237.github.io/language/python04/</link>
      <pubDate>Thu, 15 Feb 2024 00:00:00 +0000</pubDate>
      
      <guid>https://qt237.github.io/language/python04/</guid>
      <description>字典 字典是一系列的键值对，每个键值对是一个键和与键对应关联的值，可以通过访问键的形式来返回键对应的值。字典用{}来表示。
alien = {} # 创建空字典 alien_0 = {&amp;#39;color&amp;#39;: &amp;#39;green&amp;#39;, &amp;#39;points&amp;#39;: 5} #创建非空字典 print(alien_0[&amp;#39;color&amp;#39;]) # 返回green alien_0[&amp;#39;x_position&amp;#39;] = 0 # 添加键值对 删除字典的键值对：
del alien_0[&amp;#39;x_position&amp;#39;] 删除后值会永远消失，注意。
使用get()来访问值 对比直接调用的好处是可以设置错误返回值，这样的话当不存在键值对和值等情况可以更好应对。
alien_0 = {&amp;#39;color&amp;#39;: &amp;#39;green&amp;#39;, &amp;#39;speed&amp;#39;: &amp;#39;slow&amp;#39;} print(alien_0[&amp;#39;points&amp;#39;]) # 输出错误显示 KeyError: &amp;#39;points&amp;#39; 因为不存在points，所以报错了，程序不会正常启动。这种情况下，可以使用get()。
方法get() 的第一个参数用于指定键，是必不可少的；第二个参数为指定的键不存在时要返回的值，是可选的，在不填的情况下默认返回None。在下文里会返回指定的参数：No point value assigned。
alien_0 = {&amp;#39;color&amp;#39;: &amp;#39;green&amp;#39;, &amp;#39;speed&amp;#39;: &amp;#39;slow&amp;#39;} point_value = alien_0.get(&amp;#39;points&amp;#39;, &amp;#39;No point value assigned.&amp;#39;) print(point_value) 遍历字典 for循环来遍历字典里所有的键和值。
user_0 = { &amp;#39;username&amp;#39;: &amp;#39;efermi&amp;#39;, &amp;#39;first&amp;#39;: &amp;#39;enrico&amp;#39;, &amp;#39;last&amp;#39;: &amp;#39;fermi&amp;#39;, } for key, value in user_0.</description>
    </item>
    
    <item>
      <title>python的if,and,or</title>
      <link>https://qt237.github.io/language/python03/</link>
      <pubDate>Tue, 13 Feb 2024 00:00:00 +0000</pubDate>
      
      <guid>https://qt237.github.io/language/python03/</guid>
      <description>if 一个简单的实例：
cars = [&amp;#39;audi&amp;#39;, &amp;#39;bmw&amp;#39;, &amp;#39;subaru&amp;#39;, &amp;#39;toyota&amp;#39;] for car in cars: if car == &amp;#39;bmw&amp;#39;: print(car.upper()) elif car == &amp;#39;audi&amp;#39; print(car.lower()) else: print(car.title()) 判断条件 a == b #等于 a != b #不等于 a &amp;gt; b a &amp;lt; b a &amp;gt;= b a &amp;lt;= b (a &amp;gt; b) and (a = b) #与 (a &amp;gt; b) or (a = b) #或 cat in cats #返回True/False cat not in cats #返回True/False if cats #判断是不是空的列表 大概这样的，和C差不多不过有点区别。</description>
    </item>
    
    <item>
      <title>python的元祖</title>
      <link>https://qt237.github.io/language/python02/</link>
      <pubDate>Mon, 12 Feb 2024 00:00:00 +0000</pubDate>
      
      <guid>https://qt237.github.io/language/python02/</guid>
      <description>python的元祖 元组看起来很像列表，但使用圆括号而非中括号来标识。定义元组后，就可使用索引来访问其元素，就像访问列表元素一样。
例如，如果有一个大小不应改变的矩形，可将其长度和宽度存储在一个元组中，从而确保它们是不能修改的。
dimensions = (200, 50) print(dimensions[0]) print(dimensions[1]) 如果要定义只包含一个元素的元组，必须在这个元素后面加上逗号:
my_t = (3,) 也可以像列表一样遍历，修改其中的具体的值。
dem = (200, 500) print(dem) dem = (100, 300) print(dem) 除了不能改变大小和列表是一样的。</description>
    </item>
    
    <item>
      <title>python的列表 list</title>
      <link>https://qt237.github.io/language/python01/</link>
      <pubDate>Mon, 12 Feb 2024 00:00:00 +0000</pubDate>
      
      <guid>https://qt237.github.io/language/python01/</guid>
      <description>python的列表 list 列表我觉得是python里自己的很独特的一个数据结构。生成也很简单。应该空的列表。list = []很简单。python不像C++那样指定变量的类型。变量的定义和赋值都非常简单。列表也是一样的。
list = [] list1 = [1,2,3] list2 = [&amp;#39;hello&amp;#39;,&amp;#39;world&amp;#39;] 很适合处理字符。
关于列表的遍历，一个for循环就可以了。直接print列表的话，得到的是[&#39;hello&#39;,&#39;world&#39;]这样代[]的数据，遍历的话可以这样：
lists = [&amp;#39;hello&amp;#39;,&amp;#39;world&amp;#39;] for list in lists: print(list) 列表的一部分：切片 要创建切片，可指定要使用的第一个元素和最后一个元素的索引。与函数range() 一样，Python在到达第二个索引之前的元素后停止。要输出列表中的前三个元素，需要指定索引0和3，这将返回索引为0、1和2的元素。
players = [&amp;#39;charles&amp;#39;, &amp;#39;martina&amp;#39;, &amp;#39;michael&amp;#39;, &amp;#39;florence&amp;#39;, &amp;#39;eli&amp;#39;] print(players[0:3]) players[:3]：从0开始到第三个元素结束。
players[-3:]：后三个元素
players[:]：遍历整个切片
关于赋值的一些问题 my_foods = [&amp;#39;pizza&amp;#39;, &amp;#39;falafel&amp;#39;, &amp;#39;carrot cake&amp;#39;] # 这行不通: friend_foods = my_foods my_foods.append(&amp;#39;cannoli&amp;#39;) friend_foods.append(&amp;#39;ice cream&amp;#39;) print(&amp;#34;My favorite foods are:&amp;#34;) print(my_foods) print(&amp;#34;\nMy friend&amp;#39;s favorite foods are:&amp;#34;) print(friend_foods) 得到两个一样的输出。这个时候想达到效果用切片：
friend_foods = my_foods[:] my_foods.append(&amp;#39;cannoli&amp;#39;) friend_foods.append(&amp;#39;ice cream&amp;#39;) print(&amp;#34;My favorite foods are:&amp;#34;) print(my_foods) print(&amp;#34;\nMy friend&amp;#39;s favorite foods are:&amp;#34;) print(friend_foods) 切片的一种用法。</description>
    </item>
    
    <item>
      <title>test post</title>
      <link>https://qt237.github.io/base/test/</link>
      <pubDate>Sun, 11 Feb 2024 18:02:38 +0800</pubDate>
      
      <guid>https://qt237.github.io/base/test/</guid>
      <description>Hello World hello world
你好世界</description>
    </item>
    
    <item>
      <title>test post</title>
      <link>https://qt237.github.io/object/test/</link>
      <pubDate>Sun, 11 Feb 2024 18:02:38 +0800</pubDate>
      
      <guid>https://qt237.github.io/object/test/</guid>
      <description>Hello World hello world
你好世界</description>
    </item>
    
  </channel>
</rss>
